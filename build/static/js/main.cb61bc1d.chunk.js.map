{"version":3,"sources":["arcules.svg","container/weather.js","container/Form.js","container/API/getWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","className","city","country","temperature","humidity","description","error","copyright","href","target","rel","Form","onSubmit","getWeather","type","name","placeholder","id","class","GetWeather","e","a","preventDefault","latitude","elements","value","longitude","sdate","date","fetch","api_call","json","data","message","JSON","parse","dataLength","Object","keys","length","console","log","setState","code","timezone","flags","units","currently","daily","summary","undefined","alert","state","zip","payload","this","Component","App","style","marginTop","src","logo","alt","path","exact","component","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cb61bc1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arcules.2acb4489.svg\";","import React from 'react';\r\n\r\n/* const weather = (props) => (\r\n    <tr>\r\n        <th scope=\"row\">time</th><th scope=\"row\">summary</th><th scope=\"row\">icon</th><th scope=\"row\">earestStormDistance</th><th scope=\"row\">nearestStormBearing</th><th scope=\"row\">precipIntensity</th>\r\n        <td>{props.time}</td><td>{props.summary}</td><td>{props.icon}</td><td>{props.nearestStormDistance}</td><td>{props.nearestStormBearing}</td><td>{props.precipIntensity}</td>\r\n        \r\n    </tr>\r\n    ); */\r\n    const Weather = props => (\r\n        <div className=\"weather__info\">\r\n         {\t\r\n             props.city && props.country && <p className=\"weather__key\"> Your forecast for the city of: \r\n                 <span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n                 <br></br> <hr></hr>\r\n             </p>\r\n            \r\n         }\r\n         { \t\r\n             props.temperature && <p className=\"weather__key\"> Temperature: \r\n                 <span className=\"weather__value\"> { props.temperature }\t</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.humidity && <p className=\"weather__key\"> Humidity: \r\n                 <span className=\"weather__value\"> { props.humidity }%</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.description && <p className=\"weather__key\"> Conditions: \r\n                 <span className=\"weather__value\"> { props.description } </span>\r\n         </p> \r\n         }\r\n         { \r\n             props.error && <p className=\"weather__error\">{ props.error }</p>  \r\n         }\r\n         { \r\n             props.copyright && <p className=\"weather__copyright\">\r\n                 <br></br> <hr></hr><a href=\"https://darksky.net/poweredby/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                 { props.copyright }\r\n                 </a>\r\n                 </p>  \r\n         }\r\n        </div>\r\n    );\r\n    \r\n    export default Weather;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n\t\t<input type=\"text\" name=\"latitude\" placeholder=\"Enter Latitude\"/>\r\n\t\t<input type=\"text\" name=\"longitude\" placeholder=\"Enter Longitude\"/>\r\n        <input type=\"date\" id=\"date\" name=\"date\"></input>\r\n\t\t<button>Get Forecast</button>\r\n        <br></br>\r\n        <span class=\"note\"><strong>Note:</strong><i> \"date\" is not supported in Safari or Internet Explorer 11 (or earlier).</i></span>\r\n\t<br></br>\r\n    <span class=\"valid\"><strong>Example of values:</strong><i> Latitude: 37.8267 and Longitude: -122.4233 </i></span>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React , {Component} from 'react';\r\n//import axios from \"axios/index\";\r\nimport './../../App.css';\r\nimport Weather from \"../weather\";\r\nimport Form from \"../Form\";\r\n//import * as express from 'express';\r\n\r\n\r\n//\r\nclass GetWeather extends Component {\r\n    constructor() {\r\n        super()\r\n        \r\n        //const API_KEY = \"3585775f387b0d0cba6c5b3dc41b8167\";\r\n    this.state = {\r\n        zip: '',\r\n        payload: []\r\n\r\n    }; \r\n}\r\n   //Start\r\n   \r\n   getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const latitude = e.target.elements.latitude.value;\r\n    const longitude = e.target.elements.longitude.value;\r\n    let sdate = e.target.elements.date.value; \r\n    sdate = sdate + \"T12:00:00Z\"  \r\n    let data;\r\n    //Temp value for the time\r\n    //sdate = '1584673998';\r\n    //Since we are not passing sensesive information over the URL, we will use GET otherwise POST for security \r\n    //const api_call = await fetch(`https://arcules-test-101.appspot.com/api/weather/${latitude}&/${longitude}&/${sdate}`,\r\n    //Dev\r\n    //const api_call = await fetch(`http://localhost:3000/api/weather/${latitude}&/${longitude}&/${sdate}`);\r\n    //Production\r\n    const api_call = await fetch(`https://arcules-test-101.appspot.com/api/weather/${latitude}&/${longitude}&/${sdate}`);\r\n\r\n    data = await api_call.json();\r\n    data = data.message\r\n    data = JSON.parse(data);\r\n    //resolve(data ? JSON.parse(data) : {})\r\n    const dataLength =  Object.keys(data).length;\r\n    console.log(\"Data Length:\" + dataLength.length)\r\n    console.log(\"Data:\" +data)\r\n    \r\n    if (latitude && longitude && sdate) {\r\n        if(dataLength < 7){\r\n            //Either you got a permission denied or the values you passed in are not valid\r\n            this.setState({\r\n            error: \"Error: \" + data.code + \"=> \" + data.error\r\n            });\r\n        } else{\r\n            //You got a good payload back\r\n            //Safe the state of all variables in this component so we can use them later\r\n      this.setState({\r\n        city: data.timezone,\r\n        country: data.flags.units,\r\n\r\n        temperature: data.currently.temperature,\r\n        humidity: data.currently.humidity * 100,\r\n        description: data.daily.summary,\r\n        error: \"\",\r\n        copyright: \"Powered by Dark Sky\"        \r\n      });\r\n    }\r\n    } else {\r\n        //All input values are required\r\n        //Safe the state of all variables in this component so we can use them later\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        copyright: undefined,\r\n        error: \"All fields values are required. Please enter the values.\"\r\n      });\r\n      //Redunctant but it is ok for now\r\n      alert(\"All fields values are required\");\r\n    }\r\n\r\n  }\r\n   //Finish\r\n\r\n    render() {\r\n       \r\n        return (\r\n\r\n      <body>\r\n        <div class=\"body_container\">          \r\n          <p>This is a training exercise written with a Golang back-end which consumes a Restfull API from <a href=\"https://darksky.net/forecast/40.7127,-74.0059/us12/en\" target=\"_blank\" rel=\"noopener noreferrer\">Dark Sky</a> weather service and passes the payload to the React fron-end to complete the UI</p>\r\n          <p>This app ultimately would be enhanced to accept the ZIP-CODE instead of the coordinates during the next update.</p>\r\n          <p>For the app to work, the user would need to provide a valid latitude and longitude plus the date in order to get the weather forecast information</p>\r\n          {/* <div className=\"form-group\">\r\n                        Please enter your ZIP code: <input type=\"number\" className=\"form-control\" value={this.state.zip} onChange={(event) => this.setState({zip: event.target.value})}/>\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={this.postDataHandler}><i className=\"fa fa-plus\"></i> Get weather</button>\r\n        </div> */}\r\n        \r\n                {/* Another Div */}\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather \r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n\r\n                    temperature={this.state.temperature} \r\n                    humidity={this.state.humidity}\r\n                    \r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                    copyright={this.state.copyright}\r\n                  />\r\n                </div>\r\n                </div>\r\n      </body>\r\n    \r\n            )\r\n    }\r\n}\r\n\r\nexport default GetWeather;","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport GetWeather from './container/API/getWeather';\nimport logo from './arcules.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div style={{marginTop: '5px'}}>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n<h1>Arcules Weather Test App</h1>\n</div>\n      </header>\n      <Route path=\"/\" exact component={GetWeather}/>\n      \n      <footer>\n      <div class=\"footer_home\">\n      \n      <footer>&copy; Copyright 2020 Ahmadou Ndoung</footer>\n\n</div>\n      </footer>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst app = (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}