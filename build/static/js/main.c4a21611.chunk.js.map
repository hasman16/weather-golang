{"version":3,"sources":["arcules.svg","container/weather.js","container/Form.js","container/API/getWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","className","city","country","countryFlag","temperature","temperatureHigh","temperatureLow","humidity","precipProbability","windSpeed","visibility","description","error","copyright","href","target","rel","Form","onSubmit","getWeather","today","type","name","placeholder","class","for","id","value","GetWeather","check","newDate","Date","e","a","preventDefault","latitude","elements","longitude","sdate","date","address","state","fullAddress","fetch","api_call_address","json","dataAddress","console","log","JSON","stringify","results","geometry","location","lat","lng","api_call","data","message","parse","dataLength","Object","keys","length","setState","code","alert","flags","units","toUpperCase","currently","daily","summary","dateToFormat","getDate","undefined","this","Component","App","style","marginTop","src","logo","alt","path","exact","component","Boolean","window","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c4a21611.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arcules.2acb4489.svg\";","import React from 'react';\r\n\r\n/* const weather = (props) => (\r\n    <tr>\r\n        <th scope=\"row\">time</th><th scope=\"row\">summary</th><th scope=\"row\">icon</th><th scope=\"row\">earestStormDistance</th><th scope=\"row\">nearestStormBearing</th><th scope=\"row\">precipIntensity</th>\r\n        <td>{props.time}</td><td>{props.summary}</td><td>{props.icon}</td><td>{props.nearestStormDistance}</td><td>{props.nearestStormBearing}</td><td>{props.precipIntensity}</td>\r\n        \r\n    </tr> \r\n    ); */\r\n    const Weather = props => (\r\n        <div className=\"weather__info\">\r\n         {\t\r\n             props.city && <sapn className=\"weather__city_info\"> Your forecast for: \r\n                 <span className=\"weather__value\"> { props.city }</span>                 \r\n             </sapn>\r\n            \r\n         }\r\n          {\t\r\n            props.country && props.countryFlag &&\r\n                 <span className=\"weather__value\"> , { props.country }</span>\r\n                \r\n             \r\n            \r\n         }\r\n         \r\n         <br></br> <hr></hr>\r\n         <div className=\"twoColumn\">\r\n         { \t\r\n         \r\n             props.temperature && <p className=\"weather__key\"> Temperature: \r\n                 <span className=\"weather__value\"> { props.temperature }<span>&#x2109;</span>\t</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.temperatureHigh && <p className=\"weather__key\"> High Temperature: \r\n                 <span className=\"weather__value\"> { props.temperatureHigh }<span>&#x2109;</span>\t</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.temperatureLow && <p className=\"weather__key\"> Low Temperature: \r\n                 <span className=\"weather__value\"> { props.temperatureLow }<span>&#x2109;</span>\t</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.humidity && <p className=\"weather__key\"> Humidity: \r\n                 <span className=\"weather__value\"> { props.humidity }<span>&#x25;</span></span>\r\n             </p> \r\n         }\r\n        { \t\r\n             props.precipProbability && <p className=\"weather__key\"> Chance of rain: \r\n                 <span className=\"weather__value\"> { props.precipProbability }<span>&#x25;</span></span>\r\n             </p> \r\n         }\r\n\r\n           { \t\r\n             props.windSpeed && <p className=\"weather__key\"> WindSpeed: \r\n                 <span className=\"weather__value\"> { props.windSpeed } mph</span>\r\n             </p> \r\n         }\r\n           { \t\r\n             props.visibility && <p className=\"weather__key\"> Visibility: \r\n                 <span className=\"weather__value\"> { props.visibility }+ mi&larr;</span>\r\n             </p> \r\n         }\r\n         { \t\r\n             props.description && <p className=\"weather__key\"> Conditions: \r\n                 <span className=\"weather__value\"> { props.description } </span>\r\n         </p> \r\n         }\r\n         </div>\r\n         { \r\n             props.error && <p className=\"errorMsg white\">{ props.error }</p>  \r\n         }\r\n         { \r\n             props.copyright && <p className=\"weather__copyright\">\r\n                 <br></br> <hr></hr><a href=\"https://darksky.net/poweredby/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                 { props.copyright }\r\n                 </a>\r\n                 </p>  \r\n         }\r\n\r\n\r\n        </div>\r\n    );\r\n    \r\n    export default Weather;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n        {\t\r\n             props.today && <span className=\"today smallScreen\"> Today is: \r\n                 <span className=\"todayDate\"> { props.today }</span>                \r\n             </span>            \r\n         }\r\n\r\n\t\t<input type=\"text\" name=\"latitude\" placeholder=\"Latitude\"/>\r\n\t\t<input type=\"text\" name=\"longitude\" placeholder=\"Longitude\"/>\r\n        \r\n        \r\n         <br></br>\r\n        <span class=\"note\"><strong>Note:</strong><i> \"date\" is not supported in Safari or Internet Explorer 11 (or earlier).</i></span>\r\n\t<br></br>\r\n    <span class=\"valid\"><strong>Example of values:</strong><i> Latitude: 37.8267 and Longitude: -122.4233 </i></span>\r\n\r\n        <p><label for=\"state\" className=\"whitePadding\">OR</label></p>\r\n        <br></br>\r\n\r\n        {/* or get the full address */}\r\n\r\n        <input type=\"text\" name=\"address\" placeholder=\"Address\"/>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n        {/* <input type=\"number\" name=\"zipcode\" placeholder=\"ZIP Code\"/> */}\r\n\t\t<label for=\"state\" className=\"white\">Choose a State:</label>\r\n        <select id=\"state\" name=\"state\">\r\n\t<option value=\"AL\">Alabama</option>\r\n\t<option value=\"AK\">Alaska</option>\r\n\t<option value=\"AZ\">Arizona</option>\r\n\t<option value=\"AR\">Arkansas</option>\r\n\t<option value=\"CA\">California</option>\r\n\t<option value=\"CO\">Colorado</option>\r\n\t<option value=\"CT\">Connecticut</option>\r\n\t<option value=\"DE\">Delaware</option>\r\n\t<option value=\"DC\">District Of Columbia</option>\r\n\t<option value=\"FL\">Florida</option>\r\n\t<option value=\"GA\">Georgia</option>\r\n\t<option value=\"HI\">Hawaii</option>\r\n\t<option value=\"ID\">Idaho</option>\r\n\t<option value=\"IL\">Illinois</option>\r\n\t<option value=\"IN\">Indiana</option>\r\n\t<option value=\"IA\">Iowa</option>\r\n\t<option value=\"KS\">Kansas</option>\r\n\t<option value=\"KY\">Kentucky</option>\r\n\t<option value=\"LA\">Louisiana</option>\r\n\t<option value=\"ME\">Maine</option>\r\n\t<option value=\"MD\">Maryland</option>\r\n\t<option value=\"MA\">Massachusetts</option>\r\n\t<option value=\"MI\">Michigan</option>\r\n\t<option value=\"MN\">Minnesota</option>\r\n\t<option value=\"MS\">Mississippi</option>\r\n\t<option value=\"MO\">Missouri</option>\r\n\t<option value=\"MT\">Montana</option>\r\n\t<option value=\"NE\">Nebraska</option>\r\n\t<option value=\"NV\">Nevada</option>\r\n\t<option value=\"NH\">New Hampshire</option>\r\n\t<option value=\"NJ\">New Jersey</option>\r\n\t<option value=\"NM\">New Mexico</option>\r\n\t<option value=\"NY\">New York</option>\r\n\t<option value=\"NC\">North Carolina</option>\r\n\t<option value=\"ND\">North Dakota</option>\r\n\t<option value=\"OH\">Ohio</option>\r\n\t<option value=\"OK\">Oklahoma</option>\r\n\t<option value=\"OR\">Oregon</option>\r\n\t<option value=\"PA\">Pennsylvania</option>\r\n\t<option value=\"RI\">Rhode Island</option>\r\n\t<option value=\"SC\">South Carolina</option>\r\n\t<option value=\"SD\">South Dakota</option>\r\n\t<option value=\"TN\">Tennessee</option>\r\n\t<option value=\"TX\">Texas</option>\r\n\t<option value=\"UT\">Utah</option>\r\n\t<option value=\"VT\">Vermont</option>\r\n\t<option value=\"VA\">Virginia</option>\r\n\t<option value=\"WA\">Washington</option>\r\n\t<option value=\"WV\">West Virginia</option>\r\n\t<option value=\"WI\">Wisconsin</option>\r\n\t<option value=\"WY\">Wyoming</option>\r\n</select>\t\r\n        <br></br>\r\n<label for=\"date\" className=\"white\"> Date</label><input type=\"date\" id=\"date\" name=\"date\"></input> <button>Get Forecast</button> \r\n         \r\n<br></br>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React , {Component} from 'react';\r\n//import axios from \"axios/index\";\r\nimport './../../App.css';\r\nimport Weather from \"../weather\";\r\nimport Form from \"../Form\";\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n//import * as express from 'express';\r\n\r\n\r\n//\r\nclass GetWeather extends Component {\r\n    constructor() {\r\n        super()        \r\n        \r\n        //const API_KEY = \"3585775f387b0d0cba6c5b3dc41b8167\"; \r\n        //const fullAddress = ''; \r\n                  \r\n\r\n    this.state = {\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      humidity: undefined,\r\n      description: undefined,\r\n      copyright: undefined,\r\n      temperatureHigh: undefined,\r\n      temperatureLow: undefined,\r\n      windSpeed: undefined,\r\n      visibility: undefined,\r\n      precipProbability: undefined,\r\n      countryFlag: undefined,\r\n      error: undefined\r\n\r\n    }; \r\n}\r\n\r\n countryFlag = '';\r\n check = false;\r\n newDate = new Date();\r\n   //Start\r\n   \r\n   getWeather = async (e) => {\r\n    e.preventDefault();\r\n    let latitude = e.target.elements.latitude.value;\r\n    let longitude = e.target.elements.longitude.value;\r\n    let sdate = e.target.elements.date.value; \r\n\r\n    const address = e.target.elements.address.value;\r\n    const city = e.target.elements.city.value;\r\n    const state = e.target.elements.state.value; \r\n\r\n     this.fullAddress = address + \", \" + city + \", \" + state;\r\n    \r\n     \r\n\r\n    if (latitude && longitude && sdate) {      \r\n      this.fullAddress = 'Latitude: ' + latitude + ' and Longitude: ' +  longitude;\r\n      this.countryFlag = \"\";\r\n      this.check = true;\r\n      // Check if the full address was passed in instead*\r\n    } else{\r\n      if (address && city && state && sdate) {\r\n       this.countryFlag = \"Y\";\r\n       this.check = true;\r\n    //Get the Latitude and Longitude for the provided address\r\n     //Google API_KEY= AIzaSyAPlfKsbpy6x4U6CKWdOWoxfSs2pgQ0DqA \r\n     // eslint-disable-next-line \r\n     const gAPIKey = \"AIzaSyAPlfKsbpy6x4U6CKWdOWoxfSs2pgQ0DqA\";\r\n //Test\r\n //https://maps.googleapis.com/maps/api/geocode/xml?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=AIzaSyAPlfKsbpy6x4U6CKWdOWoxfSs2pgQ0DqA\r\n    const api_call_address = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${address},+${city},+${state}&key=${gAPIKey}`);\r\n    const dataAddress = await api_call_address.json();\r\n    console.log(\"Data: \" + JSON.stringify(dataAddress));\r\n\r\n    latitude = dataAddress.results[0].geometry.location.lat;\r\n    longitude = dataAddress.results[0].geometry.location.lng;\r\n    /*const newDate = new Date();\r\n     const year = newDate.getFullYear();\r\n    const month = newDate.getMonth();\r\n    const day = newDate.getDay();\r\n    const hour = newDate.getHours();\r\n    const min = newDate.getMinutes();\r\n    const sec = newDate.getSeconds(); \r\n    const dates = newDate.getUTCDate();\r\n    const dates1 = newDate.getUTCMonth();\r\n    const dates2 = newDate.getUTCDay();\r\n    const time = newDate.getTime();*/   \r\n \r\n    console.log(\"Latitude: \" + latitude + \"  Longitude: \" + longitude + \" sdate: \" + sdate);\r\n      }\r\n    }\r\n\r\n    //If the check failed for some reason like no values provide or something else, don't call the Golang API\r\n    if(this.check){\r\n    sdate = sdate + \"T12:00:00Z\";\r\n    let data;\r\n    //Temp value for the time\r\n    //sdate = '1584673998';\r\n    //Since we are not passing sensesive information over the URL, we will use GET otherwise POST for security \r\n    //const api_call = await fetch(`https://arcules-test-101.appspot.com/api/weather/${latitude}&/${longitude}&/${sdate}`,\r\n    //Dev\r\n    //const api_call = await fetch(`http://localhost:3000/api/weather/${latitude}&/${longitude}&/${sdate}`);\r\n    //Production\r\n    const api_call = await fetch(`https://arcules-test-101.appspot.com/api/weather/${latitude}/${longitude}/${sdate}`);\r\n\r\n    data = await api_call.json();\r\n    data = data.message\r\n    data = JSON.parse(data);\r\n    //resolve(data ? JSON.parse(data) : {})\r\n    const dataLength =  Object.keys(data).length;\r\n    console.log(\"Data Length:\" + dataLength)\r\n    console.log(\"Data: \" + JSON.stringify(data))\r\n    \r\n    \r\n    if (latitude && longitude && sdate) {\r\n        if(dataLength < 7){\r\n            //Either you got a permission denied or the values you passed in are not valid\r\n            this.setState({\r\n            error: \"Error: \" + data.code + \"=> \" + data.error\r\n            });\r\n            alert(data.error);\r\n        } else{\r\n            //You got a good payload back\r\n            //Safe the state of all variables in this component so we can use them later\r\n            // description: (data.currently.summary ? data.daily.data[0].summary : ''),\r\n         \r\n        //const todayDate = newDate.getDate();\r\n      this.setState({\r\n        city: this.fullAddress,\r\n        country: data.flags.units.toUpperCase(),\r\n\r\n        temperature: data.currently.temperature,\r\n        temperatureHigh: data.daily.data[0].temperatureHigh,\r\n        temperatureLow: data.daily.data[0].temperatureLow,\r\n        precipProbability: data.currently.precipProbability * 100,\r\n        windSpeed: data.currently.windSpeed,\r\n        visibility: data.currently.visibility,\r\n        humidity: data.currently.humidity * 100,\r\n        description: data.daily.data[0].summary,\r\n        error: \"\",\r\n        copyright: \"Powered by Dark Sky\",\r\n        dateToFormat: this.newDate.getDate(),\r\n        countryFlag: this.countryFlag            \r\n      });\r\n    }\r\n    } else {\r\n        //All input values are required\r\n        //Safe the state of all variables in this component so we can use them later\r\n       \r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        copyright: undefined,\r\n        temperatureHigh: undefined,\r\n        temperatureLow: undefined,\r\n        windSpeed: undefined,\r\n        visibility: undefined,\r\n        precipProbability: undefined,\r\n        dateToFormat: this.newDate.getDate() ,\r\n        countryFlag: undefined,\r\n        error: \"No proper values entered. Please makes sure you enter the right values including the DATE.\"\r\n      });\r\n      //Redunctant but it is ok for now\r\n      alert(\"No proper values entered. Please makes sure you enter the right values including the DATE.\");\r\n    }\r\n  } else{\r\n    this.setState({\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      humidity: undefined,\r\n      description: undefined,\r\n      copyright: undefined,\r\n      temperatureHigh: undefined,\r\n      temperatureLow: undefined,\r\n      windSpeed: undefined,\r\n      visibility: undefined,\r\n      precipProbability: undefined,\r\n      dateToFormat: this.newDate.getDate() ,\r\n      countryFlag: undefined,\r\n      error: \"No proper values entered. Please makes sure you enter the right values including the DATE.\"\r\n    });\r\n\r\n  }\r\n\r\n  }\r\n   //Finish\r\n\r\n    render() {\r\n       \r\n        return (\r\n\r\n      <body>\r\n        <div class=\"body_container\">  \r\n        <div className=\"twoColumn\">        \r\n          <p>This is a training exercise written with a Golang back-end which consumes a Restfull API from <a href=\"https://darksky.net/forecast/40.7127,-74.0059/us12/en\" target=\"_blank\" rel=\"noopener noreferrer\">Dark Sky</a> weather service and passes the payload to the React fron-end to complete the UI</p>\r\n          <p>This app ultimately would be enhanced to accept the ZIP-CODE instead of the coordinates during the next update.</p>\r\n          <p>For the app to work, the user would need to provide a valid latitude and longitude plus the date in order to get the weather forecast information</p>\r\n           \r\n          </div>\r\n          {/* <div className=\"form-group\">\r\n                        Please enter your ZIP code: <input type=\"number\" className=\"form-control\" value={this.state.zip} onChange={(event) => this.setState({zip: event.target.value})}/>\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={this.postDataHandler}><i className=\"fa fa-plus\"></i> Get weather</button>\r\n        </div> */}\r\n        \r\n                {/* Another Div */}\r\n                <div className=\"form-container\">\r\n                  <Form getWeather={this.getWeather}\r\n                  today={<Moment date={this.dateToFormat} />}\r\n                  />\r\n                  <Weather \r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n\r\n                    temperature={this.state.temperature} \r\n                    humidity={this.state.humidity}\r\n                    \r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                    copyright={this.state.copyright}\r\n\r\n                    temperatureHigh={this.state.temperatureHigh}\r\n                    temperatureLow={this.state.temperatureLow}\r\n                    windSpeed={this.state.windSpeed}\r\n                    visibility={this.state.visibility}\r\n                    precipProbability={this.state.precipProbability}\r\n                    countryFlag={this.countryFlag}\r\n                    \r\n                     />\r\n                </div>\r\n                </div>\r\n      </body>\r\n    \r\n            )\r\n    }\r\n}\r\n\r\nexport default GetWeather;","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport GetWeather from './container/API/getWeather';\nimport logo from './arcules.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div style={{marginTop: '5px'}}>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n<h1>Arcules Weather Test App</h1>\n</div>\n      </header>\n      <Route path=\"/\" exact component={GetWeather}/>\n      \n      <footer>\n      <div class=\"footer_home\">\n      \n      <footer>&copy; Copyright 2020 Ahmadou Ndoung</footer>\n\n</div>\n      </footer>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst app = (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}